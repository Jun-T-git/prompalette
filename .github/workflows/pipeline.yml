name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    branches:
      - develop
      - staging
      - main

env:
  PNPM_VERSION: 8
  NODE_VERSION: 20

jobs:
  # ========================================
  # 基本CI: 全ブランチで実行
  # ========================================
  ci:
    name: CI Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run --filter "./packages/**" build

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

      - name: Build applications
        run: pnpm run --filter "./apps/**" build

  # ========================================
  # ネイティブアプリビルド: リリース用
  # ========================================
  build-native:
    name: Build Native App (macOS)
    needs: ci
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run --filter "./packages/**" build

      - name: Build Tauri app
        run: pnpm --filter apps/native tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            apps/native/src-tauri/target/release/bundle/**/*.dmg
          retention-days: 30

  # ========================================
  # Stagingプレリリース
  # ========================================
  prerelease:
    name: Pre-release (Staging)
    needs: build-native
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Create pre-release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: staging-${{ github.run_number }}
          name: 'Staging Build #${{ github.run_number }}'
          body: |
            ## 🚧 Staging Pre-release

            This is an automated pre-release from the staging branch.
            
            ### Changes
            - Commit: ${{ github.sha }}
            - Run: ${{ github.run_number }}
            
            ### ⚠️ Warning
            This is a pre-release version for testing purposes only.
          files: |
            ./dist/**/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # 本番リリース
  # ========================================
  release:
    name: Production Release
    needs: build-native
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./apps/native/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Create production release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: false
          tag_name: v${{ steps.version.outputs.version }}
          name: 'Release v${{ steps.version.outputs.version }}'
          body: |
            ## 🎉 Release v${{ steps.version.outputs.version }}

            ### 📦 Downloads
            Please download the appropriate installer for your platform below.

            ### 🔧 Installation
            - **macOS**: Download and open the .dmg file

            ### 📝 Changelog
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          files: |
            ./dist/**/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # WebアプリDeploy設定 (将来用)
  # ========================================
  # deploy-web:
  #   name: Deploy Web App
  #   needs: ci
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Placeholder for web deployment
  #       run: echo "Web deployment will be configured here"