name: CI Pipeline

on:
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    branches:
      - develop
      - staging
      - main

env:
  PNPM_VERSION: 8
  NODE_VERSION: 20

jobs:
  # ========================================
  # CI: 全ブランチで実行される品質チェック
  # ========================================
  ci:
    name: CI Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run --filter "./packages/**" build

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

      - name: Security Audit
        run: |
          echo "🔍 Running security audit..."
          pnpm audit --audit-level high || {
            echo "❌ High or critical vulnerabilities found in dependencies"
            echo "Please run 'pnpm audit' locally and fix vulnerabilities before proceeding"
            exit 1
          }
          echo "✅ Security audit passed"

      - name: Build applications
        run: |
          # Build shared packages first
          pnpm run --filter "./packages/**" build
          
          # Build web and API apps (environment-agnostic)
          pnpm run --filter "./apps/web" build
          pnpm run --filter "./apps/api" build

  # ========================================
  # ビルド検証: リリース前の最終確認
  # ========================================
  verify-native-build:
    name: Verify Native Build
    needs: ci
    if: |
      github.event_name == 'pull_request' && 
      (github.base_ref == 'staging' || github.base_ref == 'main')
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run --filter "./packages/**" build

      - name: Build Tauri app (dry-run)
        run: |
          cd apps/native
          
          # Determine environment based on target branch
          if [[ "${{ github.base_ref }}" == "staging" ]]; then
            echo "🏗️ Building for staging environment"
            export APP_ENV=staging
            pnpm tauri build --debug
          elif [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "🏗️ Building for production environment"
            export APP_ENV=production
            pnpm tauri build --debug
          else
            echo "🏗️ Building for development environment (default)"
            export APP_ENV=development
            pnpm tauri build --debug
          fi