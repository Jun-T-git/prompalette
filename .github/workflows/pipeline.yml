name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    branches:
      - develop
      - staging
      - main

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-node_modules-${{ hashFiles('pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  typecheck:
    name: Type check
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          fail-on-cache-miss: true
      - name: Type check
        run: pnpm typecheck

  lint:
    name: Lint
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          fail-on-cache-miss: true
      - name: Lint native app
        run: pnpm --filter apps/native lint
      - name: Lint web app
        run: pnpm --filter apps/web lint
      - name: Lint API
        run: pnpm --filter apps/api lint

  build:
    name: Build
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          fail-on-cache-miss: true
      - name: Build
        run: pnpm build

  test:
    name: Test
    needs: [install, typecheck, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          fail-on-cache-miss: true
      - name: Test
        run: pnpm test

  build-native:
    name: Build Native Installers
    needs: [build, test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Rust (macOS)
        if: matrix.os == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
      - name: Install Rust (Windows)
        if: matrix.os == 'windows-latest'
        uses: dtolnay/rust-toolchain@stable
      - name: Build frontend
        run: pnpm --filter apps/native build
      - name: Build native app
        run: pnpm --filter apps/native tauri build
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-installer
          path: |
            apps/native/src-tauri/target/release/bundle/**/*.dmg
            apps/native/src-tauri/target/release/bundle/**/*.exe
            apps/native/src-tauri/target/release/bundle/**/*.msi

  prerelease:
    if: github.ref == 'refs/heads/staging'
    name: Pre-release (staging)
    needs: build-native
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
      - name: List artifacts
        run: ls -R ./dist
      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: staging-${{ github.run_number }}
          name: 'Staging Pre-release ${{ github.run_number }}'
          files: |
            ./dist/**/*.dmg
            ./dist/**/*.exe
            ./dist/**/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    if: github.ref == 'refs/heads/main'
    name: Official Release (main)
    needs: build-native
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
      - name: List artifacts
        run: ls -R ./dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: false
          tag_name: v${{ github.run_number }}
          name: 'Release v${{ github.run_number }}'
          files: |
            ./dist/**/*.dmg
            ./dist/**/*.exe
            ./dist/**/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # 署名や公証の自動化は今後ここに追加
