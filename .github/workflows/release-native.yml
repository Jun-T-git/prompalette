name: Release Native App

on:
  push:
    branches:
      - staging
      - main
    paths:
      - 'apps/native/**'
      - '.github/workflows/release-native.yml'
      - '.github/actions/**'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - prerelease
          - release

permissions:
  contents: write

env:
  PNPM_VERSION: 8
  NODE_VERSION: 20

jobs:
  # ========================================
  # ビルド: macOS向けネイティブアプリ
  # ========================================
  build-native:
    name: Build macOS App
    runs-on: macos-14
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.artifact.outputs.name }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "📦 Environment: staging"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "🚀 Environment: production"
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "🔧 Environment: development"
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get version
        id: version
        run: |
          cd apps/native
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Version: $VERSION"

      - name: Setup Apple Code Signing (Production only)
        if: ${{ steps.env.outputs.environment == 'production' && env.APPLE_CERTIFICATE_BASE64 != '' && env.APPLE_CERTIFICATE_PASSWORD != '' }}
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "🔑 Setting up Apple Developer ID code signing for production..."
          
          # Create keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          
          # Import certificate
          echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          
          # Set signing identity
          echo "APPLE_SIGNING_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep 'Developer ID Application' | head -1 | grep -o '[A-Z0-9]\{40\}')" >> $GITHUB_ENV
          
          echo "✅ Code signing setup completed for production"

      - name: Build Tauri app (Environment-specific)
        env:
          APP_ENV: ${{ steps.env.outputs.environment }}
        run: |
          echo "=== Build Environment ==="
          echo "APP_ENV: $APP_ENV"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "Current directory: $(pwd)"
          echo "=== Directory structure ==="
          
          if [ -d "apps/native" ]; then
            echo "✅ apps/native exists"
            ls -la apps/native/
          else
            echo "❌ apps/native not found"
            exit 1
          fi
          
          # Environment-specific signing configuration
          if [[ "$APP_ENV" == "production" ]] && [[ -n "$APPLE_SIGNING_IDENTITY" ]]; then
            echo "🔏 Building with Apple Developer ID signing for production..."
            export APPLE_CODESIGN_IDENTITY="$APPLE_SIGNING_IDENTITY"
            export TAURI_SIGNING_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
            export TAURI_SIGNING_PRIVATE_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          else
            echo "🧪 Building with ad-hoc signing for $APP_ENV"
            export APPLE_CODESIGN_IDENTITY="-"
            # Skip Tauri signing for staging environment
            if [[ "$APP_ENV" == "staging" ]]; then
              echo "🚫 Skipping Tauri signing for staging environment"
              unset TAURI_SIGNING_PRIVATE_KEY
              unset TAURI_SIGNING_PRIVATE_KEY_PASSWORD
            elif [[ -n "${{ secrets.TAURI_PRIVATE_KEY }}" ]]; then
              echo "📝 Tauri signing keys detected, setting up..."
              export TAURI_SIGNING_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
              export TAURI_SIGNING_PRIVATE_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
              echo "✅ Tauri signing environment variables set"
            else
              echo "⚠️ No Tauri signing keys found for $APP_ENV"
            fi
          fi
          
          export CI=true
          export SKIP_JENKINS=1
          
          echo "🏗️ Starting environment-specific build process..."
          cd apps/native
          
          echo "=== Environment-specific Build ==="
          case "$APP_ENV" in
            "staging")
              echo "🔧 Building for staging environment"
              pnpm tauri:build:staging 2>&1 | tee ../build.log || {
                echo "❌ Staging build failed, trying fallback..."
                APP_ENV=staging pnpm tauri build --target universal-apple-darwin --bundles dmg --verbose
              }
              ;;
            "production")
              echo "🚀 Building for production environment"
              pnpm tauri:build:production 2>&1 | tee ../build.log || {
                echo "❌ Production build failed, trying fallback..."
                APP_ENV=production pnpm tauri build --target universal-apple-darwin --bundles dmg --verbose
              }
              ;;
            *)
              echo "🔨 Building for development environment"
              pnpm tauri:build:dev 2>&1 | tee ../build.log || {
                echo "❌ Development build failed, trying fallback..."
                APP_ENV=development pnpm tauri build --target universal-apple-darwin --bundles dmg --verbose
              }
              ;;
          esac
          
          cd ../..

      - name: Fix macOS code signing resources
        run: |
          cd apps/native
          echo "🔧 Fixing macOS code signing resources..."
          
          # Find the built app
          APP_PATH=$(find src-tauri/target -name "*.app" -type d | head -1)
          
          if [ -n "$APP_PATH" ]; then
            echo "📱 Found app at: $APP_PATH"
            
            # Re-sign with proper resource sealing
            codesign --force --deep --sign - "$APP_PATH"
            
            echo "✅ Code signing resources fixed"
            
            # Verify the fix
            codesign -dvvv "$APP_PATH" | grep -E "(Sealed Resources|Info.plist)" || echo "⚠️ Verification incomplete"
          else
            echo "❌ No app found to fix"
          fi
          
          cd ../..

      - name: Debug build output
        run: |
          echo "=== Build Target Directories ==="
          echo "ARM64 target:"
          ls -la apps/native/src-tauri/target/release/bundle/dmg/ || echo "ARM64 DMG directory not found"
          echo ""
          echo "x86_64 target:"
          ls -la apps/native/src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/ || echo "x86_64 DMG directory not found"
          echo ""
          echo "Universal target:"
          ls -la apps/native/src-tauri/target/universal-apple-darwin/release/bundle/dmg/ || echo "Universal DMG directory not found"

      - name: Find DMG files
        id: find_dmg
        run: |
          cd apps/native
          echo "=== Searching for DMG files ==="
          
          # Find DMG files with prioritization
          DMG_FILES=$(find src-tauri/target -name "*.dmg" -type f | grep -v "rw\." | sort)
          
          if [ -z "$DMG_FILES" ]; then
            echo "❌ No DMG files found!"
            exit 1
          fi
          
          echo "Found DMG files:"
          echo "$DMG_FILES"
          
          # Prioritize universal build
          SELECTED_DMG=""
          if echo "$DMG_FILES" | grep -q "universal-apple-darwin"; then
            SELECTED_DMG=$(echo "$DMG_FILES" | grep "universal-apple-darwin" | head -n1)
            echo "✅ Selected universal DMG: $SELECTED_DMG"
          else
            SELECTED_DMG=$(echo "$DMG_FILES" | head -n1)
            echo "✅ Selected first available DMG: $SELECTED_DMG"
          fi
          
          echo "dmg_path=$SELECTED_DMG" >> $GITHUB_OUTPUT
          echo "dmg_name=$(basename $SELECTED_DMG)" >> $GITHUB_OUTPUT

      - name: Notarize macOS app (Production only)
        if: ${{ steps.env.outputs.environment == 'production' && env.APPLE_SIGNING_IDENTITY != '' && env.APPLE_ID != '' && env.APPLE_PASSWORD != '' && env.APPLE_TEAM_ID != '' }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd apps/native
          DMG_PATH="${{ steps.find_dmg.outputs.dmg_path }}"
          
          echo "🍎 Notarizing production app with Apple..."
          
          # Submit for notarization
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple "$DMG_PATH"
          
          echo "✅ Notarization completed for production"

      - name: Set artifact name
        id: artifact
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ENV="${{ steps.env.outputs.environment }}"
          if [[ "$ENV" == "production" ]]; then
            NAME="prompalette-${VERSION}-macos"
          else
            NAME="prompalette-${VERSION}-${ENV}-macos"
          fi
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "📦 Artifact name: $NAME"

      - name: Create artifact directory
        run: |
          cd apps/native
          DMG_PATH="${{ steps.find_dmg.outputs.dmg_path }}"
          DMG_NAME="${{ steps.find_dmg.outputs.dmg_name }}"
          
          echo "=== Creating artifact ==="
          echo "DMG Path: $DMG_PATH"
          echo "DMG Name: $DMG_NAME"
          
          # Create artifact directory
          mkdir -p "${{ steps.artifact.outputs.name }}"
          
          # Copy DMG
          cp "$DMG_PATH" "${{ steps.artifact.outputs.name }}/"
          
          # List artifact contents
          echo "=== Artifact contents ==="
          ls -la "${{ steps.artifact.outputs.name }}/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: apps/native/${{ steps.artifact.outputs.name }}/
          retention-days: 7

  # ========================================
  # プレリリース（staging向け）
  # ========================================
  pre-release:
    name: Staging Pre-release
    needs: build-native
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Debug artifact structure
        run: |
          echo "=== Working directory ==="
          pwd
          ls -la ./
          echo "=== Check if dist exists ==="
          if [ -d "./dist" ]; then
            echo "dist directory exists"
            find ./dist -type f -name "*.dmg" | head -10
            echo "=== All files in dist ==="
            ls -la ./dist/
            if [ -d "./dist/${{ needs.build-native.outputs.artifact-name }}" ]; then
              echo "=== DMG files in ${{ needs.build-native.outputs.artifact-name }} ==="
              ls -la ./dist/${{ needs.build-native.outputs.artifact-name }}/
            fi
          else
            echo "❌ dist directory does not exist"
            echo "=== Available artifacts might be ==="
            find . -name "*.dmg" 2>/dev/null || echo "No DMG files found"
          fi

      - name: Generate release notes
        id: notes
        run: |
          ENV="${{ needs.build-native.outputs.environment }}"
          VERSION="${{ needs.build-native.outputs.version }}"
          
          case "$ENV" in
            "staging")
              echo "## 🚧 Staging Pre-release v${VERSION}-staging.${{ github.run_number }}" > notes.md
              echo "" >> notes.md
              echo "### 📅 Build Information" >> notes.md
              echo "- **Version**: ${VERSION}" >> notes.md
              echo "- **Build**: #${{ github.run_number }}" >> notes.md
              echo "- **Branch**: staging" >> notes.md
              echo "- **Commit**: ${{ github.sha }}" >> notes.md
              echo "" >> notes.md
              echo "### ⚠️ Important Notes" >> notes.md
              echo "This is a pre-release build for testing purposes." >> notes.md
              echo "" >> notes.md
              echo "### 🍎 macOS Installation" >> notes.md
              echo "1. Download the DMG file" >> notes.md
              echo "2. Open the DMG and drag prompalette to Applications" >> notes.md
              echo "3. On first launch, right-click and select 'Open' to bypass Gatekeeper" >> notes.md
              ;;
            *)
              echo "## 🔧 Development Build v${VERSION}-dev.${{ github.run_number }}" > notes.md
              ;;
          esac

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Skip updater signature for staging
        run: |
          echo "🧪 Staging build - skipping Tauri updater signature"
          echo "ℹ️ Staging builds use ad-hoc signing and don't require updater manifests"
          echo "🚀 Users can download DMG directly from releases"

      - name: Create pre-release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: v${{ needs.build-native.outputs.version }}-${{ needs.build-native.outputs.environment }}.${{ github.run_number }}
          name: v${{ needs.build-native.outputs.version }}-${{ needs.build-native.outputs.environment }}.${{ github.run_number }}
          body_path: notes.md
          files: |
            ./dist/${{ needs.build-native.outputs.artifact-name }}/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # 本番リリース
  # ========================================
  release:
    name: Production Release
    needs: build-native
    if: |
      github.ref == 'refs/heads/main' || 
      (github.event_name == 'workflow_dispatch' && inputs.release_type == 'release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Debug artifact structure
        run: |
          echo "=== Artifact contents ==="
          ls -la ./dist/
          find ./dist -type f -name "*.dmg" | head -10

      - name: Generate changelog
        run: |
          VERSION="${{ needs.build-native.outputs.version }}"
          echo "## 🎉 Release v${VERSION}" > changelog.md
          echo "" >> changelog.md
          echo "### 📝 Changes since last release" >> changelog.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "Changes since ${LAST_TAG}:" >> changelog.md
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" >> changelog.md
          else
            echo "Initial release" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "" >> changelog.md
          echo "### 🍎 macOS Installation" >> changelog.md
          echo "1. Download the DMG file below" >> changelog.md
          echo "2. Open the DMG and drag prompalette to Applications" >> changelog.md
          echo "3. On first launch, right-click the app and select 'Open' to bypass Gatekeeper" >> changelog.md
          echo "" >> changelog.md
          echo "### 🔧 System Requirements" >> changelog.md
          echo "- macOS 10.15 or later" >> changelog.md
          echo "- Supports both Intel and Apple Silicon Macs" >> changelog.md

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if release exists
        id: check_release
        run: |
          VERSION="${{ needs.build-native.outputs.version }}"
          if gh release view "v${VERSION}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Release v${VERSION} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "📦 Release v${VERSION} does not exist yet"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate updater signature
        if: steps.check_release.outputs.exists == 'false'
        id: signature
        uses: ./.github/actions/generate-updater-signature
        with:
          artifact-name: ${{ needs.build-native.outputs.artifact-name }}
          environment: production
          tauri-private-key: ${{ secrets.TAURI_PRIVATE_KEY }}
          tauri-key-password: ${{ secrets.TAURI_KEY_PASSWORD }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Create production updater manifest
        if: steps.check_release.outputs.exists == 'false'
        id: manifest
        uses: ./.github/actions/create-updater-manifest
        with:
          version: v${{ needs.build-native.outputs.version }}
          release-notes-file: changelog.md
          signature: ${{ steps.signature.outputs.signature }}
          dmg-file: ${{ steps.signature.outputs.dmg-file }}
          repository: ${{ github.repository }}
          manifest-filename: updater-manifest.json

      - name: Create production release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          prerelease: false
          tag_name: v${{ needs.build-native.outputs.version }}
          name: v${{ needs.build-native.outputs.version }}
          body_path: changelog.md
          files: |
            ./dist/${{ needs.build-native.outputs.artifact-name }}/*.dmg
            ./updater-manifest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing release
        if: steps.check_release.outputs.exists == 'true'
        run: |
          echo "Release v${{ needs.build-native.outputs.version }} already exists. Skipping creation."
          echo "To create a new release, please update the version in package.json."