name: Release Native App

on:
  push:
    branches:
      - staging
      - main
    paths:
      - 'apps/native/**'
      - '.github/workflows/release-native.yml'
      - '.github/actions/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - prerelease
          - release

permissions:
  contents: write

env:
  PNPM_VERSION: 8
  NODE_VERSION: 20

jobs:
  # ========================================
  # ビルド: macOS向けネイティブアプリ
  # ========================================
  build-native:
    name: Build macOS App
    runs-on: macos-14
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.artifact.outputs.name }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "📦 Environment: staging"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "🚀 Environment: production"
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "🔧 Environment: development"
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get version
        id: version
        run: |
          cd apps/native
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Version: $VERSION"

      - name: Setup Apple Code Signing (Production only)
        if: ${{ steps.env.outputs.environment == 'production' }}
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "🔑 Setting up Apple Developer ID code signing for production..."
          
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          
          # Import certificate
          echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Set signing identity
          SIGNING_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep 'Developer ID Application' | head -1 | grep -o '[A-Z0-9]\{40\}')
          echo "APPLE_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV
          
          echo "✅ Code signing setup completed for production"



      - name: Build Tauri app (Environment-specific)
        env:
          APP_ENV: ${{ steps.env.outputs.environment }}
        run: |
          # Use proper signing for production, ad-hoc for others
          if [[ "$APP_ENV" == "production" ]] && [[ -n "$APPLE_SIGNING_IDENTITY" ]]; then
            echo "🔏 Building with Apple Developer ID for production"
            export APPLE_CODESIGN_IDENTITY="$APPLE_SIGNING_IDENTITY"
          else
            echo "🔧 Building with ad-hoc signing for $APP_ENV environment"
            export APPLE_CODESIGN_IDENTITY="-"
          fi
          
          
          export CI=true
          export SKIP_JENKINS=1
          
          echo "🏗️ Starting environment-specific build process..."
          cd apps/native
          
          echo "=== Environment-specific Build ==="
          case "$APP_ENV" in
            "staging")
              echo "🔧 Building for staging environment"
              pnpm tauri:build:staging 2>&1 | tee ../build.log || {
                echo "❌ Staging build failed, trying fallback..."
                APP_ENV=staging pnpm tauri build --bundles dmg --verbose
              }
              ;;
            "production")
              echo "🚀 Building for production environment"
              pnpm tauri:build:production 2>&1 | tee ../build.log || {
                echo "❌ Production build failed, trying fallback..."
                APP_ENV=production pnpm tauri build --bundles dmg --verbose
              }
              ;;
            *)
              echo "🔨 Building for development environment"
              pnpm tauri:build:dev 2>&1 | tee ../build.log || {
                echo "❌ Development build failed, trying fallback..."
                APP_ENV=development pnpm tauri build --bundles dmg --verbose
              }
              ;;
          esac
          
          cd ../..



      - name: Find DMG files
        id: find_dmg
        run: |
          cd apps/native
          
          # Find DMG file
          DMG_PATH=$(find src-tauri/target -name "*.dmg" -type f | head -1)
          
          if [ -z "$DMG_PATH" ]; then
            echo "❌ No DMG file found"
            exit 1
          fi
          
          echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT
          echo "dmg_name=$(basename $DMG_PATH)" >> $GITHUB_OUTPUT

      - name: Notarize macOS app (Production only)
        if: ${{ steps.env.outputs.environment == 'production' && env.APPLE_SIGNING_IDENTITY != '' }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd apps/native
          DMG_PATH="${{ steps.find_dmg.outputs.dmg_path }}"
          
          echo "🍎 Notarizing production app with Apple..."
          
          # Submit for notarization
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple "$DMG_PATH"
          
          echo "✅ Notarization completed for production"



      - name: Set artifact name
        id: artifact
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ENV="${{ steps.env.outputs.environment }}"
          if [[ "$ENV" == "production" ]]; then
            NAME="prompalette-${VERSION}-macos"
          else
            NAME="prompalette-${VERSION}-${ENV}-macos"
          fi
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "📦 Artifact name: $NAME"

      - name: Create artifact directory
        run: |
          cd apps/native
          DMG_PATH="${{ steps.find_dmg.outputs.dmg_path }}"
          
          # Create artifact directory
          mkdir -p "${{ steps.artifact.outputs.name }}"
          
          # Copy DMG
          cp "$DMG_PATH" "${{ steps.artifact.outputs.name }}/"
          
          echo "✅ Artifact created with DMG: $(basename "$DMG_PATH")"
          ls -la "${{ steps.artifact.outputs.name }}/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: apps/native/${{ steps.artifact.outputs.name }}/
          retention-days: 7

  # ========================================
  # プレリリース（staging向け）
  # ========================================
  pre-release:
    name: Staging Pre-release
    needs: build-native
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-native.outputs.artifact-name }}
          path: ./dist

      - name: Verify artifact contents
        run: |
          echo "=== Verifying downloaded artifacts ==="
          if [ -d "./dist" ] && [ -n "$(find ./dist -name '*.dmg' -type f)" ]; then
            echo "✅ DMG files found:"
            find ./dist -name '*.dmg' -type f
          else
            echo "❌ No DMG files found in artifacts"
            exit 1
          fi

      - name: Generate release notes
        id: notes
        run: |
          ENV="${{ needs.build-native.outputs.environment }}"
          VERSION="${{ needs.build-native.outputs.version }}"
          
          case "$ENV" in
            "staging")
              echo "## 🚧 Staging Pre-release v${VERSION}-staging.${{ github.run_number }}" > notes.md
              echo "" >> notes.md
              echo "### 📅 Build Information" >> notes.md
              echo "- **Version**: ${VERSION}" >> notes.md
              echo "- **Build**: #${{ github.run_number }}" >> notes.md
              echo "- **Branch**: staging" >> notes.md
              echo "- **Commit**: ${{ github.sha }}" >> notes.md
              echo "" >> notes.md
              echo "### ⚠️ Important Notes" >> notes.md
              echo "This is a pre-release build for testing purposes." >> notes.md
              echo "" >> notes.md
              echo "### 🍎 macOS Installation" >> notes.md
              echo "1. Download the DMG file" >> notes.md
              echo "2. Open the DMG and drag prompalette to Applications" >> notes.md
              echo "3. On first launch, right-click and select 'Open' to bypass Gatekeeper" >> notes.md
              ;;
            *)
              echo "## 🔧 Development Build v${VERSION}-dev.${{ github.run_number }}" > notes.md
              ;;
          esac

      - name: Setup OpenSSL for Ed25519 signing
        run: |
          echo "🔧 Setting up OpenSSL with Ed25519 support"
          
          # Check current OpenSSL version
          openssl version
          
          # Install OpenSSL 3.x if needed (Ubuntu 22.04+ has it by default)
          if ! openssl list -public-key-algorithms | grep -i ed25519 >/dev/null 2>&1; then
            echo "Installing OpenSSL 3.x for Ed25519 support..."
            sudo apt-get update
            sudo apt-get install -y openssl
          fi
          
          # Verify Ed25519 support
          echo "✅ OpenSSL Ed25519 support:"
          openssl list -public-key-algorithms | grep -i ed25519 || echo "❌ Ed25519 not supported"
          
      - name: Sign update for auto-update (Staging)
        if: needs.build-native.outputs.environment == 'staging'
        run: |
          echo "🔑 Signing staging update for auto-update system"
          
          # Find DMG file
          DMG_FILE=$(find ./dist -name "*.dmg" -type f | head -1)
          if [ -z "$DMG_FILE" ]; then
            echo "❌ No DMG file found for signing"
            exit 1
          fi
          
          # Run signing script
          export STAGING_SIGNING_PRIVATE_KEY="${{ secrets.STAGING_SIGNING_PRIVATE_KEY }}"
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          if ! ./scripts/signing/sign-update.sh staging "$DMG_FILE" "${{ needs.build-native.outputs.version }}"; then
            echo "❌ Staging signing failed"
            exit 1
          fi
          
          echo "✅ Staging update signed successfully"

      - name: Create pre-release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: v${{ needs.build-native.outputs.version }}-${{ needs.build-native.outputs.environment }}.${{ github.run_number }}
          name: v${{ needs.build-native.outputs.version }}-${{ needs.build-native.outputs.environment }}.${{ github.run_number }}
          body_path: notes.md
          files: |
            ./dist/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # 本番リリース
  # ========================================
  release:
    name: Production Release
    needs: build-native
    if: |
      github.ref == 'refs/heads/main' || 
      (github.event_name == 'workflow_dispatch' && inputs.release_type == 'release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-native.outputs.artifact-name }}
          path: ./dist

      - name: Verify artifact contents
        run: |
          echo "=== Verifying downloaded artifacts ==="
          if [ -d "./dist" ] && [ -n "$(find ./dist -name '*.dmg' -type f)" ]; then
            echo "✅ DMG files found:"
            find ./dist -name '*.dmg' -type f
          else
            echo "❌ No DMG files found in artifacts"
            exit 1
          fi

      - name: Generate changelog
        run: |
          VERSION="${{ needs.build-native.outputs.version }}"
          echo "## 🎉 Release v${VERSION}" > changelog.md
          echo "" >> changelog.md
          echo "### 📝 Changes since last release" >> changelog.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "Changes since ${LAST_TAG}:" >> changelog.md
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" >> changelog.md
          else
            echo "Initial release" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "" >> changelog.md
          echo "### 🍎 macOS Installation" >> changelog.md
          echo "1. Download the DMG file below" >> changelog.md
          echo "2. Open the DMG and drag prompalette to Applications" >> changelog.md
          echo "3. On first launch, right-click the app and select 'Open' to bypass Gatekeeper" >> changelog.md
          echo "" >> changelog.md
          echo "### 🔧 System Requirements" >> changelog.md
          echo "- macOS 10.15 or later" >> changelog.md
          echo "- Supports both Intel and Apple Silicon Macs" >> changelog.md

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if release exists
        id: check_release
        run: |
          VERSION="${{ needs.build-native.outputs.version }}"
          if gh release view "v${VERSION}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Release v${VERSION} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "📦 Release v${VERSION} does not exist yet"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup OpenSSL for Ed25519 signing
        run: |
          echo "🔧 Setting up OpenSSL with Ed25519 support"
          
          # Check current OpenSSL version
          openssl version
          
          # Install OpenSSL 3.x if needed (Ubuntu 22.04+ has it by default)
          if ! openssl list -public-key-algorithms | grep -i ed25519 >/dev/null 2>&1; then
            echo "Installing OpenSSL 3.x for Ed25519 support..."
            sudo apt-get update
            sudo apt-get install -y openssl
          fi
          
          # Verify Ed25519 support
          echo "✅ OpenSSL Ed25519 support:"
          openssl list -public-key-algorithms | grep -i ed25519 || echo "❌ Ed25519 not supported"

      - name: Sign update for auto-update (Production)
        if: needs.build-native.outputs.environment == 'production'
        run: |
          echo "🔑 Signing production update for auto-update system"
          
          # Find DMG file
          DMG_FILE=$(find ./dist -name "*.dmg" -type f | head -1)
          if [ -z "$DMG_FILE" ]; then
            echo "❌ No DMG file found for signing"
            exit 1
          fi
          
          # Run signing script
          export PRODUCTION_SIGNING_PRIVATE_KEY="${{ secrets.PRODUCTION_SIGNING_PRIVATE_KEY }}"
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          if ! ./scripts/signing/sign-update.sh production "$DMG_FILE" "${{ needs.build-native.outputs.version }}"; then
            echo "❌ Production signing failed"
            exit 1
          fi
          
          echo "✅ Production update signed successfully"

      - name: Create production release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          prerelease: false
          tag_name: v${{ needs.build-native.outputs.version }}
          name: v${{ needs.build-native.outputs.version }}
          body_path: changelog.md
          files: |
            ./dist/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing release
        if: steps.check_release.outputs.exists == 'true'
        run: |
          echo "Release v${{ needs.build-native.outputs.version }} already exists. Skipping creation."
          echo "To create a new release, please update the version in package.json."